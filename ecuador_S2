/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var studyextent = ee.FeatureCollection("users/luiscartor/ecuadorextent");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// 0. FUNCTIONS
////////////////////////////////////////
// Cloud masking algorithma for Sentinel2


// METHOD 1: Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
      
  return image.updateMask(mask);
}


// METHOD 2: 
function maskClouds(img) {
  var clouds = ee.Image(img.get('cloud_mask')).select('probability');
  var isNotCloud = clouds.lt(MAX_CLOUD_PROBABILITY);
  return img.updateMask(isNotCloud);
}


// 1. LOAD COLLECTION
////////////////////////////////////////////////////////////////////////////////
// Method 1 cloud masking
// Load S2 1-C input imagery.
var S2_spr = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterDate('2019-12-01', '2020-05-31')
  .filterBounds(studyextent)
  .map(maskS2clouds)
  .select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']);

var S2_win = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterDate('2019-06-01', '2019-11-30')
  .map(maskS2clouds)
  .select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']);
  
var S2_year = ee.ImageCollection('COPERNICUS/S2_SR')
  .filterDate('2019-06-01', '2020-05-31')
  .filterBounds(studyextent)
  .map(maskS2clouds)
  .select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']);
////////////////////////////////////////////////////////////////////////////////

// Method 2 cloud masking
var MAX_CLOUD_PROBABILITY = 65;
var s2Clouds = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY');

// Year round median with Method 2 masking
var S2_year = ee.ImageCollection('COPERNICUS/S2_SR').filterDate('2019-06-01', '2020-05-31').filterBounds(studyextent);
var s2Clouds_year = s2Clouds.filterDate('2019-06-01', '2020-05-31').filterBounds(studyextent);
// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: S2_year,
  secondary: s2Clouds,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});
// Cloud mask, select bands and get median.
var S2_year_median = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds)
.select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']).median();


// SPRING median with Method 2 masking
var S2_spr = ee.ImageCollection('COPERNICUS/S2_SR').filterDate('2019-12-01', '2020-05-31').filterBounds(studyextent);
var s2Clouds_spr = s2Clouds.filterDate('2019-12-01', '2020-05-31').filterBounds(studyextent);
// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: S2_spr,
  secondary: s2Clouds_spr,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});
// Cloud mask, select bands and get median.
var S2_spr_median = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds)
.select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']).median();

// WINTER median with Method 2 masking
var S2_win = ee.ImageCollection('COPERNICUS/S2_SR').filterDate('2019-06-01', '2019-11-30').filterBounds(studyextent);
var s2Clouds_win = s2Clouds.filterDate('2019-06-01', '2019-11-30').filterBounds(studyextent);
// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: S2_win,
  secondary: s2Clouds_win,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});
// Cloud mask, select bands and get median.
var S2_win_median = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds)
.select(['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12']).median();
////////////////////////////////////////////////////////////////////////////////




// 2. CREATE COMPOSITE
//var S2dataset = S2_spr_median.addBands(S2_win_median).addBands(S2_year);


// 3. VISUALIZE AND EXPORT
Map.addLayer(S2_spr_median.clip(studyextent.geometry()), {bands: ['B4', 'B3', 'B2'],min:0,max:3000}, 'S2_spring');
Map.addLayer(S2_win_median.clip(studyextent.geometry()), {bands: ['B4', 'B3', 'B2'],min:0,max:3000}, 'S2_winter');
Map.addLayer(S2_year_median.clip(studyextent.geometry()), {bands: ['B4', 'B3', 'B2'],min:0,max:3000}, 'S2_yearround');

Map.addLayer(studyextent,'extent');

Export.image.toDrive({
  image: S2_year_median.clip(studyextent.geometry()).int16(),
  //region: S2_spr.geometry().bounds(),
  description: 'S2_yearround',
  scale: 10,
  crs : 'EPSG:27700',
  // Dimensions for 30m scale
  //dimensions:"399960x5690220",
  // Max pixels for 30m scale
  //maxPixels: 399960*5690220
});





Map.centerObject(studyextent, 8);

