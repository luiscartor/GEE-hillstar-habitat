/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var studyextent = ee.FeatureCollection("users/luiscartor/ecuadorextent");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// hillstarproject_S2S1composite
// Extracts 1-year temporally aggregated S2 data (median of B2-8,11,12) and 6-6months (2 layers 
// for 1year) S1 data (median of VV, VH, VV-VH)

// By Luis, 7 July 2020

//////////////////////////////////////////////////////////////////////////////////////

// 0. PARAMETERS
// Start dates for temporal aggregation
var startdate = ['2019-06-01'];
var winterend = ['2019-11-30'];
var springstart = ['2019-12-01'];
var endate = ['2020-05-31'];

// Sentinel-2 used bands
var S2bands = ['B2', 'B3','B4', 'B5', 'B6','B7','B8','B11','B12'];

// Maximum probability of cloud presence for cloud-masking of S2 images
var MAX_CLOUD_PROBABILITY = 65;

//////////////////////////////////////////////////////////////////////////////////////

// 1. FUNCTIONS
////////////////////////////////////////
// 1. Cloud masking algorithma for Sentinel2


// 1.1.1 METHOD 1: Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
      
  return image.updateMask(mask);
}


// 1.1.2 METHOD 2: 
function maskClouds(img) {
  var clouds = ee.Image(img.get('cloud_mask')).select('probability');
  var isNotCloud = clouds.lt(MAX_CLOUD_PROBABILITY);
  return img.updateMask(isNotCloud);
}

////////////////////////////////////////
// 2. Spatial filtering: Extracted from https://groups.google.com/forum/#!searchin/google-earth-engine-developers/kernel$20sentinel$201$20|sort:date/google-earth-engine-developers/ExepnAmP-hQ/Xxa7raFuBAAJ
// Refined Lee speckle filter as coded in the SNAP 3.0 S1TBX:
//   https://github.com/senbox-org/s1tbx/blob/master/s1tbx-op-sar-processing/src/main/java/org/esa/s1tbx/sar/gpf/filtering/SpeckleFilters/RefinedLee.java

// Auxilliary functions
// Functions to convert from/to dB
function toNatural(img) {
  return ee.Image(10.0).pow(img.select(0).divide(10.0));
}
function toDB(img) {
  return ee.Image(img).log10().multiply(10.0);
}

// The RL speckle filter
function RefinedLee(img) {
  // img must be in natural units, i.e. not in dB!
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1,3),3);
  var kernel3 = ee.Kernel.fixed(3,3, weights3, 1, 1, false);

  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);

  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0], [0,1,0,1,0,1,0], [0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0]]);
  var sample_kernel = ee.Kernel.fixed(7,7, sample_weights, 3,3, false);

  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);

  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());

  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());

  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);

  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);

  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));

  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);

  // "collapse" the stack into a singe band image (due to masking, each pixel has just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  

  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);
  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));

  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0,0,5).arrayReduce(ee.Reducer.mean(), [0]);

  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0,7),3).cat(ee.List.repeat(ee.List.repeat(1,7),4));
  var diag_weights = ee.List([[1,0,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,0,0,0,0], 
    [1,1,1,1,0,0,0], [1,1,1,1,1,0,0], [1,1,1,1,1,1,0], [1,1,1,1,1,1,1]]);
  var rect_kernel = ee.Kernel.fixed(7,7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7,7, diag_weights, 3, 3, false);

  // Create stacks for mean and variance using the original kernels. Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel).updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel).updateMask(directions.eq(1));

  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel).updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel).updateMask(directions.eq(2)));

  // and add the bands for rotated kernels
  for (var i=1; i<4; i++) {
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
  }

  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());

  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0));
  var b = varX.divide(dir_var);
  var result = dir_mean.add(b.multiply(img.subtract(dir_mean)));
  return(result);
}

//////////////////////////////////////////////////////////////////////////////////////
// 2. S2 TEMPORAL AGGREGATION
//////////////////////////////////////////////////////////////////////////////////////

// Method 1 cloud masking
// Load S2 1-C input imagery.
//var S2_spr = ee.ImageCollection('COPERNICUS/S2_SR')
//  .filterDate(springstart, enddate)
//  .filterBounds(studyextent)
//  .map(maskS2clouds)
//  .select(S2bands);

//var S2_win = ee.ImageCollection('COPERNICUS/S2_SR')
//  .filterDate(startdate, winterend)
//  .map(maskS2clouds)
//  .select(S2bands);
  
//var S2_year = ee.ImageCollection('COPERNICUS/S2_SR')
//  .filterDate(startdate, enddate)
//  .filterBounds(studyextent)
//  .map(maskS2clouds)
//  .select(S2bands);
////////////////////////////////////////////////////////////////////////////////

// Method 2 cloud masking
var s2Clouds = ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY');

// Year round median with Method 2 masking
var S2_year = ee.ImageCollection('COPERNICUS/S2_SR').filterDate('2019-06-01', '2020-05-31').filterBounds(studyextent);
var s2Clouds_year = s2Clouds.filterDate('2019-06-01', '2020-05-31').filterBounds(studyextent);
// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: S2_year,
  secondary: s2Clouds,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});
// Cloud mask, select bands and get median.
var S2_year_median = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds)
.select(S2bands).median();


// SPRING median with Method 2 masking
var S2_spr = ee.ImageCollection('COPERNICUS/S2_SR').filterDate(springstart, enddate).filterBounds(studyextent);
var s2Clouds_spr = s2Clouds.filterDate(springstart, enddate).filterBounds(studyextent);
// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: S2_spr,
  secondary: s2Clouds_spr,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});
// Cloud mask, select bands and get median.
var S2_spr_median = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds)
.select(S2bands).median();

// WINTER median with Method 2 masking
var S2_win = ee.ImageCollection('COPERNICUS/S2_SR').filterDate(startdate, winterend).filterBounds(studyextent);
var s2Clouds_win = s2Clouds.filterDate(startdate, winterend).filterBounds(studyextent);
// Join S2 SR with cloud probability dataset to add cloud mask.
var s2SrWithCloudMask = ee.Join.saveFirst('cloud_mask').apply({
  primary: S2_win,
  secondary: s2Clouds_win,
  condition:
      ee.Filter.equals({leftField: 'system:index', rightField: 'system:index'})
});
// Cloud mask, select bands and get median.
var S2_win_median = ee.ImageCollection(s2SrWithCloudMask).map(maskClouds)
.select(S2bands).median();
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// 3. S1 TEMPORAL AGGREGATION
////////////////////////////////////////////////////////////////////////////////
// LOAD S1 COLLECTION
var s1 = ee.ImageCollection('COPERNICUS/S1_GRD')
// Filter to get images collected in interferometric wide swath mode.
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  // Filter to get images with VV and VH dual polarization.
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  // select relative orbit number
  //.filter(ee.Filter.eq('relativeOrbitNumber_start', 52))
  // Filter time to images dates
  .filterDate(startdate, enddate)
  .filterBounds(studyextent)
  // Filter to orbitdirection Descending
  .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));

print(s1)

var vh = s1.select('VH').filterBounds(studyextent);
var vv = s1.select('VV').filterBounds(studyextent);

print(vh)
print(vv)

// COMPOSITING S1 LAYERS
// Create single images that can be displayed as one 3-band composite image
// Calculate the median for different times and polarisations
var vhspr = vh.filterDate(startdate,enddate).median();
vhspr = ee.Image(toDB(RefinedLee(toNatural(vhspr))).arrayGet([0])).multiply(100);
var vhwin = vh.filterDate(startdate, enddate).median();
vhwin = ee.Image(toDB(RefinedLee(toNatural(vhwin))).arrayGet([0])).multiply(100);

var vvspr = vv.filterDate(startdate, enddate).median();
vvspr = ee.Image(toDB(RefinedLee(toNatural(vvspr))).arrayGet([0])).multiply(100);
var vvwin = vv.filterDate(startdate, enddate).median();
vvwin = ee.Image(toDB(RefinedLee(toNatural(vvwin))).arrayGet([0])).multiply(100);

print(vhspr)

// Bands for (VV-VH) (see Abdikan et al. 2016)
var diffspr = vvspr.subtract(vhspr);
var diffwin = vvwin.subtract(vhwin);

// Merge images in one composite
var s1_composite = vhspr.addBands(vhwin).addBands(vvspr).addBands(vvwin).addBands(diffspr).addBands(diffwin);
print(s1_composite)


////////////////////////////////////////////////////////////////////////////////
// 4. CREATE OPTICAL-RADAR COMPOSITE
var S2S1dataset = S2_year_median.addBands(s1_composite);
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// 5. VISUALIZE AND EXPORT
////////////////////////////////////////////////////////////////////////////////

Map.centerObject(studyextent, 8);


Map.addLayer(S2_spr_median.clip(studyextent.geometry()), {bands: ['B4', 'B3', 'B2'],min:0,max:3000}, 'S2_spring');
Map.addLayer(S2_win_median.clip(studyextent.geometry()), {bands: ['B4', 'B3', 'B2'],min:0,max:3000}, 'S2_winter');
Map.addLayer(S2_year_median.clip(studyextent.geometry()), {bands: ['B4', 'B3', 'B2'],min:0,max:3000}, 'S2_yearround');

Map.addLayer(s1_composite.clip(studyextent.geometry()), {bands: ['sum','sum_1','sum_2'], min: [-3500], max: [-100]}, 's1');



Export.image.toDrive({
  image: S2_year_median.clip(studyextent.geometry()).int16(),
  //region: S2_spr.geometry().bounds(),
  description: 'S2_yearround',
  scale: 10,
  crs : 'EPSG:32717',
  // Dimensions for 10m scale
  dimensions:"31232x78080",
  // Max pixels for 10m scale
  maxPixels:  3082732677
});


Export.image.toDrive({
  image: S2S1dataset.clip(studyextent.geometry()).int16(),
  //region: S2_spr.geometry().bounds(),
  description: 'S2year_S1_composite',
  scale: 10,
  crs : 'EPSG:32717',
  // Dimensions for 10m scale
  dimensions:"24064x84224",
  // Max pixels for 10m scale
  //maxPixels: 399960*5690220
  maxPixels: 3082732677
});






